// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

module sui_blog_example::blog {
    use std::option;
    use std::string::String;
    use sui::event;
    use sui::object::{Self, ID, UID};
    use sui::transfer;
    use sui::tx_context::TxContext;
    friend sui_blog_example::blog_create_logic;
    friend sui_blog_example::blog_update_logic;
    friend sui_blog_example::blog_aggregate;

    const EDATA_TOO_LONG: u64 = 102;
    const EINAPPROPRIATE_VERSION: u64 = 103;

    struct Blog has key {
        id: UID,
        version: u64,
        name: String,
        articles: vector<ID>,
    }

    public fun id(blog: &Blog): object::ID {
        object::uid_to_inner(&blog.id)
    }

    public fun version(blog: &Blog): u64 {
        blog.version
    }

    public fun name(blog: &Blog): String {
        blog.name
    }

    public(friend) fun set_name(blog: &mut Blog, name: String) {
        assert!(std::string::length(&name) <= 200, EDATA_TOO_LONG);
        blog.name = name;
    }

    public fun articles(blog: &Blog): vector<ID> {
        blog.articles
    }

    public(friend) fun set_articles(blog: &mut Blog, articles: vector<ID>) {
        blog.articles = articles;
    }

    public(friend) fun new_blog(
        name: String,
        articles: vector<ID>,
        ctx: &mut TxContext,
    ): Blog {
        assert!(std::string::length(&name) <= 200, EDATA_TOO_LONG);
        Blog {
            id: object::new(ctx),
            version: 0,
            name,
            articles,
        }
    }

    struct BlogCreated has copy, drop {
        id: option::Option<object::ID>,
        name: String,
        articles: vector<ID>,
    }

    public fun blog_created_id(blog_created: &BlogCreated): option::Option<object::ID> {
        blog_created.id
    }

    public(friend) fun set_blog_created_id(blog_created: &mut BlogCreated, id: object::ID) {
        blog_created.id = option::some(id);
    }

    public fun blog_created_name(blog_created: &BlogCreated): String {
        blog_created.name
    }

    public fun blog_created_articles(blog_created: &BlogCreated): vector<ID> {
        blog_created.articles
    }

    public(friend) fun new_blog_created(
        name: String,
        articles: vector<ID>,
    ): BlogCreated {
        BlogCreated {
            id: option::none(),
            name,
            articles,
        }
    }

    struct BlogUpdated has copy, drop {
        id: object::ID,
        version: u64,
        name: String,
        articles: vector<ID>,
    }

    public fun blog_updated_id(blog_updated: &BlogUpdated): object::ID {
        blog_updated.id
    }

    public fun blog_updated_name(blog_updated: &BlogUpdated): String {
        blog_updated.name
    }

    public fun blog_updated_articles(blog_updated: &BlogUpdated): vector<ID> {
        blog_updated.articles
    }

    public(friend) fun new_blog_updated(
        blog: &Blog,
        name: String,
        articles: vector<ID>,
    ): BlogUpdated {
        BlogUpdated {
            id: id(blog),
            version: version(blog),
            name,
            articles,
        }
    }


    public(friend) fun transfer_object(blog: Blog, recipient: address) {
        assert!(blog.version == 0, EINAPPROPRIATE_VERSION);
        transfer::transfer(blog, recipient);
    }

    public(friend) fun update_version_and_transfer_object(blog: Blog, recipient: address) {
        update_object_version(&mut blog);
        transfer::transfer(blog, recipient);
    }

    public(friend) fun share_object(blog: Blog) {
        assert!(blog.version == 0, EINAPPROPRIATE_VERSION);
        transfer::share_object(blog);
    }

    public(friend) fun update_version_and_share_object(blog: Blog) {
        update_object_version(&mut blog);
        transfer::share_object(blog);
    }

    public(friend) fun freeze_object(blog: Blog) {
        assert!(blog.version == 0, EINAPPROPRIATE_VERSION);
        transfer::freeze_object(blog);
    }

    public(friend) fun update_version_and_freeze_object(blog: Blog) {
        update_object_version(&mut blog);
        transfer::freeze_object(blog);
    }

    fun update_object_version(blog: &mut Blog) {
        blog.version = blog.version + 1;
        //assert!(blog.version != 0, EINAPPROPRIATE_VERSION);
    }

    public(friend) fun drop_blog(blog: Blog) {
        let Blog {
            id,
            version: _version,
            name: _name,
            articles: _articles,
        } = blog;
        object::delete(id);
    }

    public(friend) fun emit_blog_created(blog_created: BlogCreated) {
        event::emit(blog_created);
    }

    public(friend) fun emit_blog_updated(blog_updated: BlogUpdated) {
        event::emit(blog_updated);
    }

}
