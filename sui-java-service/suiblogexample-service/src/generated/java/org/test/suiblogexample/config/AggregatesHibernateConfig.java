// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiblogexample.config;

import org.test.suiblogexample.domain.article.*;
import org.test.suiblogexample.domain.*;
import org.test.suiblogexample.domain.article.hibernate.*;
import org.test.suiblogexample.domain.tag.*;
import org.test.suiblogexample.domain.*;
import org.test.suiblogexample.domain.tag.hibernate.*;
import org.test.suiblogexample.domain.tagv2.*;
import org.test.suiblogexample.domain.*;
import org.test.suiblogexample.domain.tagv2.hibernate.*;
import org.test.suiblogexample.domain.blog.*;
import org.test.suiblogexample.domain.*;
import org.test.suiblogexample.domain.blog.hibernate.*;
import org.test.suiblogexample.specialization.AggregateEventListener;
import org.test.suiblogexample.specialization.EventStore;
import org.test.suiblogexample.specialization.IdGenerator;
import org.test.suiblogexample.specialization.ReadOnlyProxyGenerator;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AggregatesHibernateConfig {


    @Bean
    public CommentEventDao commentEventDao(SessionFactory hibernateSessionFactory) {
        HibernateCommentEventDao dao = new HibernateCommentEventDao();
        dao.setSessionFactory(hibernateSessionFactory);
        return dao;
    }

    @Bean
    public ArticleStateRepository articleStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateArticleStateRepository repository = new HibernateArticleStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public ArticleStateQueryRepository articleStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateArticleStateQueryRepository repository = new HibernateArticleStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateArticleEventStore articleEventStore(SessionFactory hibernateSessionFactory) {
        HibernateArticleEventStore eventStore = new HibernateArticleEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractArticleApplicationService.SimpleArticleApplicationService articleApplicationService(
            @Qualifier("articleEventStore") EventStore articleEventStore,
            ArticleStateRepository articleStateRepository,
            ArticleStateQueryRepository articleStateQueryRepository
    ) {
        AbstractArticleApplicationService.SimpleArticleApplicationService applicationService = new AbstractArticleApplicationService.SimpleArticleApplicationService(
                articleEventStore,
                articleStateRepository,
                articleStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public TagStateRepository tagStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagStateRepository repository = new HibernateTagStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public TagStateQueryRepository tagStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagStateQueryRepository repository = new HibernateTagStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateTagEventStore tagEventStore(SessionFactory hibernateSessionFactory) {
        HibernateTagEventStore eventStore = new HibernateTagEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractTagApplicationService.SimpleTagApplicationService tagApplicationService(
            @Qualifier("tagEventStore") EventStore tagEventStore,
            TagStateRepository tagStateRepository,
            TagStateQueryRepository tagStateQueryRepository
    ) {
        AbstractTagApplicationService.SimpleTagApplicationService applicationService = new AbstractTagApplicationService.SimpleTagApplicationService(
                tagEventStore,
                tagStateRepository,
                tagStateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public TagV2StateRepository tagV2StateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagV2StateRepository repository = new HibernateTagV2StateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public TagV2StateQueryRepository tagV2StateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateTagV2StateQueryRepository repository = new HibernateTagV2StateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateTagV2EventStore tagV2EventStore(SessionFactory hibernateSessionFactory) {
        HibernateTagV2EventStore eventStore = new HibernateTagV2EventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractTagV2ApplicationService.SimpleTagV2ApplicationService tagV2ApplicationService(
            @Qualifier("tagV2EventStore") EventStore tagV2EventStore,
            TagV2StateRepository tagV2StateRepository,
            TagV2StateQueryRepository tagV2StateQueryRepository
    ) {
        AbstractTagV2ApplicationService.SimpleTagV2ApplicationService applicationService = new AbstractTagV2ApplicationService.SimpleTagV2ApplicationService(
                tagV2EventStore,
                tagV2StateRepository,
                tagV2StateQueryRepository
        );
        return applicationService;
    }



    @Bean
    public BlogStateRepository blogStateRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateBlogStateRepository repository = new HibernateBlogStateRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public BlogStateQueryRepository blogStateQueryRepository(
            SessionFactory hibernateSessionFactory,
            ReadOnlyProxyGenerator stateReadOnlyProxyGenerator
    ) {
        HibernateBlogStateQueryRepository repository = new HibernateBlogStateQueryRepository();
        repository.setSessionFactory(hibernateSessionFactory);
        repository.setReadOnlyProxyGenerator(stateReadOnlyProxyGenerator);
        return repository;
    }

    @Bean
    public HibernateBlogEventStore blogEventStore(SessionFactory hibernateSessionFactory) {
        HibernateBlogEventStore eventStore = new HibernateBlogEventStore();
        eventStore.setSessionFactory(hibernateSessionFactory);
        return eventStore;
    }

    @Bean
    public AbstractBlogApplicationService.SimpleBlogApplicationService blogApplicationService(
            @Qualifier("blogEventStore") EventStore blogEventStore,
            BlogStateRepository blogStateRepository,
            BlogStateQueryRepository blogStateQueryRepository
    ) {
        AbstractBlogApplicationService.SimpleBlogApplicationService applicationService = new AbstractBlogApplicationService.SimpleBlogApplicationService(
                blogEventStore,
                blogStateRepository,
                blogStateQueryRepository
        );
        return applicationService;
    }


}
