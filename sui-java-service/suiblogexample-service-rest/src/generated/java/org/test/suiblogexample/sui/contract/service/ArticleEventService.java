// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiblogexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiblogexample.domain.article.AbstractArticleEvent;
import org.test.suiblogexample.sui.contract.ContractConstants;
import org.test.suiblogexample.sui.contract.DomainBeanUtils;
import org.test.suiblogexample.sui.contract.SuiPackage;
import org.test.suiblogexample.sui.contract.article.ArticleUpdated;
import org.test.suiblogexample.sui.contract.article.CommentUpdated;
import org.test.suiblogexample.sui.contract.article.CommentRemoved;
import org.test.suiblogexample.sui.contract.article.ArticleCreated;
import org.test.suiblogexample.sui.contract.article.ArticleDeleted;
import org.test.suiblogexample.sui.contract.article.CommentAdded;
import org.test.suiblogexample.sui.contract.repository.ArticleEventRepository;
import org.test.suiblogexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ArticleEventService {

    public static final java.util.Set<String> DELETION_COMMAND_EVENTS = new java.util.HashSet<>(java.util.Arrays.asList("ArticleDeleted"));

    public static boolean isDeletionCommand(String eventType) {
        return DELETION_COMMAND_EVENTS.contains(eventType);
    }

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private ArticleEventRepository articleEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractArticleEvent event) {
        event.setStatus("D");
        articleEventRepository.save(event);
    }

    @Transactional
    public void pullArticleUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getArticleUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ArticleUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ARTICLE_MODULE_ARTICLE_UPDATED,
                    cursor, limit, false, ArticleUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ArticleUpdated> eventEnvelope : eventPage.getData()) {
                    saveArticleUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getArticleUpdatedEventNextCursor() {
        AbstractArticleEvent lastEvent = articleEventRepository.findFirstArticleUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveArticleUpdated(SuiMoveEventEnvelope<ArticleUpdated> eventEnvelope) {
        AbstractArticleEvent.ArticleUpdated articleUpdated = DomainBeanUtils.toArticleUpdated(eventEnvelope);
        if (articleEventRepository.findById(articleUpdated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(articleUpdated);
    }

    @Transactional
    public void pullCommentUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getCommentUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<CommentUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ARTICLE_MODULE_COMMENT_UPDATED,
                    cursor, limit, false, CommentUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<CommentUpdated> eventEnvelope : eventPage.getData()) {
                    saveCommentUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getCommentUpdatedEventNextCursor() {
        AbstractArticleEvent lastEvent = articleEventRepository.findFirstCommentUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveCommentUpdated(SuiMoveEventEnvelope<CommentUpdated> eventEnvelope) {
        AbstractArticleEvent.CommentUpdated commentUpdated = DomainBeanUtils.toCommentUpdated(eventEnvelope);
        if (articleEventRepository.findById(commentUpdated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(commentUpdated);
    }

    @Transactional
    public void pullCommentRemovedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getCommentRemovedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<CommentRemoved> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ARTICLE_MODULE_COMMENT_REMOVED,
                    cursor, limit, false, CommentRemoved.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<CommentRemoved> eventEnvelope : eventPage.getData()) {
                    saveCommentRemoved(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getCommentRemovedEventNextCursor() {
        AbstractArticleEvent lastEvent = articleEventRepository.findFirstCommentRemovedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveCommentRemoved(SuiMoveEventEnvelope<CommentRemoved> eventEnvelope) {
        AbstractArticleEvent.CommentRemoved commentRemoved = DomainBeanUtils.toCommentRemoved(eventEnvelope);
        if (articleEventRepository.findById(commentRemoved.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(commentRemoved);
    }

    @Transactional
    public void pullArticleCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getArticleCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ArticleCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ARTICLE_MODULE_ARTICLE_CREATED,
                    cursor, limit, false, ArticleCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ArticleCreated> eventEnvelope : eventPage.getData()) {
                    saveArticleCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getArticleCreatedEventNextCursor() {
        AbstractArticleEvent lastEvent = articleEventRepository.findFirstArticleCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveArticleCreated(SuiMoveEventEnvelope<ArticleCreated> eventEnvelope) {
        AbstractArticleEvent.ArticleCreated articleCreated = DomainBeanUtils.toArticleCreated(eventEnvelope);
        if (articleEventRepository.findById(articleCreated.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(articleCreated);
    }

    @Transactional
    public void pullArticleDeletedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getArticleDeletedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ArticleDeleted> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ARTICLE_MODULE_ARTICLE_DELETED,
                    cursor, limit, false, ArticleDeleted.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ArticleDeleted> eventEnvelope : eventPage.getData()) {
                    saveArticleDeleted(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getArticleDeletedEventNextCursor() {
        AbstractArticleEvent lastEvent = articleEventRepository.findFirstArticleDeletedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveArticleDeleted(SuiMoveEventEnvelope<ArticleDeleted> eventEnvelope) {
        AbstractArticleEvent.ArticleDeleted articleDeleted = DomainBeanUtils.toArticleDeleted(eventEnvelope);
        if (articleEventRepository.findById(articleDeleted.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(articleDeleted);
    }

    @Transactional
    public void pullCommentAddedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getCommentAddedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<CommentAdded> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.ARTICLE_MODULE_COMMENT_ADDED,
                    cursor, limit, false, CommentAdded.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<CommentAdded> eventEnvelope : eventPage.getData()) {
                    saveCommentAdded(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getCommentAddedEventNextCursor() {
        AbstractArticleEvent lastEvent = articleEventRepository.findFirstCommentAddedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveCommentAdded(SuiMoveEventEnvelope<CommentAdded> eventEnvelope) {
        AbstractArticleEvent.CommentAdded commentAdded = DomainBeanUtils.toCommentAdded(eventEnvelope);
        if (articleEventRepository.findById(commentAdded.getArticleEventId()).isPresent()) {
            return;
        }
        articleEventRepository.save(commentAdded);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
