// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiblogexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiblogexample.domain.blog.AbstractBlogEvent;
import org.test.suiblogexample.sui.contract.ContractConstants;
import org.test.suiblogexample.sui.contract.DomainBeanUtils;
import org.test.suiblogexample.sui.contract.SuiPackage;
import org.test.suiblogexample.sui.contract.blog.InitBlogEvent;
import org.test.suiblogexample.sui.contract.blog.DonationReceived;
import org.test.suiblogexample.sui.contract.blog.VaultWithdrawn;
import org.test.suiblogexample.sui.contract.blog.ArticleAddedToBlog;
import org.test.suiblogexample.sui.contract.blog.ArticleRemovedFromBlog;
import org.test.suiblogexample.sui.contract.blog.BlogCreated;
import org.test.suiblogexample.sui.contract.blog.BlogUpdated;
import org.test.suiblogexample.sui.contract.repository.BlogEventRepository;
import org.test.suiblogexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class BlogEventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private BlogEventRepository blogEventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractBlogEvent event) {
        event.setStatus("D");
        blogEventRepository.save(event);
    }

    @Transactional
    public void pullInitBlogEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getInitBlogEventNextCursor();
        while (true) {
            PaginatedMoveEvents<InitBlogEvent> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BLOG_MODULE_INIT_BLOG_EVENT,
                    cursor, limit, false, InitBlogEvent.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<InitBlogEvent> eventEnvelope : eventPage.getData()) {
                    saveInitBlogEvent(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getInitBlogEventNextCursor() {
        AbstractBlogEvent lastEvent = blogEventRepository.findFirstInitBlogEventByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveInitBlogEvent(SuiMoveEventEnvelope<InitBlogEvent> eventEnvelope) {
        AbstractBlogEvent.InitBlogEvent initBlogEvent = DomainBeanUtils.toInitBlogEvent(eventEnvelope);
        if (blogEventRepository.findById(initBlogEvent.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(initBlogEvent);
    }

    @Transactional
    public void pullDonationReceivedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getDonationReceivedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<DonationReceived> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BLOG_MODULE_DONATION_RECEIVED,
                    cursor, limit, false, DonationReceived.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<DonationReceived> eventEnvelope : eventPage.getData()) {
                    saveDonationReceived(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getDonationReceivedEventNextCursor() {
        AbstractBlogEvent lastEvent = blogEventRepository.findFirstDonationReceivedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveDonationReceived(SuiMoveEventEnvelope<DonationReceived> eventEnvelope) {
        AbstractBlogEvent.DonationReceived donationReceived = DomainBeanUtils.toDonationReceived(eventEnvelope);
        if (blogEventRepository.findById(donationReceived.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(donationReceived);
    }

    @Transactional
    public void pullVaultWithdrawnEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getVaultWithdrawnEventNextCursor();
        while (true) {
            PaginatedMoveEvents<VaultWithdrawn> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BLOG_MODULE_VAULT_WITHDRAWN,
                    cursor, limit, false, VaultWithdrawn.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<VaultWithdrawn> eventEnvelope : eventPage.getData()) {
                    saveVaultWithdrawn(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getVaultWithdrawnEventNextCursor() {
        AbstractBlogEvent lastEvent = blogEventRepository.findFirstVaultWithdrawnByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveVaultWithdrawn(SuiMoveEventEnvelope<VaultWithdrawn> eventEnvelope) {
        AbstractBlogEvent.VaultWithdrawn vaultWithdrawn = DomainBeanUtils.toVaultWithdrawn(eventEnvelope);
        if (blogEventRepository.findById(vaultWithdrawn.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(vaultWithdrawn);
    }

    @Transactional
    public void pullArticleAddedToBlogEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getArticleAddedToBlogEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ArticleAddedToBlog> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BLOG_MODULE_ARTICLE_ADDED_TO_BLOG,
                    cursor, limit, false, ArticleAddedToBlog.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ArticleAddedToBlog> eventEnvelope : eventPage.getData()) {
                    saveArticleAddedToBlog(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getArticleAddedToBlogEventNextCursor() {
        AbstractBlogEvent lastEvent = blogEventRepository.findFirstArticleAddedToBlogByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveArticleAddedToBlog(SuiMoveEventEnvelope<ArticleAddedToBlog> eventEnvelope) {
        AbstractBlogEvent.ArticleAddedToBlog articleAddedToBlog = DomainBeanUtils.toArticleAddedToBlog(eventEnvelope);
        if (blogEventRepository.findById(articleAddedToBlog.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(articleAddedToBlog);
    }

    @Transactional
    public void pullArticleRemovedFromBlogEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getArticleRemovedFromBlogEventNextCursor();
        while (true) {
            PaginatedMoveEvents<ArticleRemovedFromBlog> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BLOG_MODULE_ARTICLE_REMOVED_FROM_BLOG,
                    cursor, limit, false, ArticleRemovedFromBlog.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<ArticleRemovedFromBlog> eventEnvelope : eventPage.getData()) {
                    saveArticleRemovedFromBlog(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getArticleRemovedFromBlogEventNextCursor() {
        AbstractBlogEvent lastEvent = blogEventRepository.findFirstArticleRemovedFromBlogByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveArticleRemovedFromBlog(SuiMoveEventEnvelope<ArticleRemovedFromBlog> eventEnvelope) {
        AbstractBlogEvent.ArticleRemovedFromBlog articleRemovedFromBlog = DomainBeanUtils.toArticleRemovedFromBlog(eventEnvelope);
        if (blogEventRepository.findById(articleRemovedFromBlog.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(articleRemovedFromBlog);
    }

    @Transactional
    public void pullBlogCreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBlogCreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BlogCreated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BLOG_MODULE_BLOG_CREATED,
                    cursor, limit, false, BlogCreated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BlogCreated> eventEnvelope : eventPage.getData()) {
                    saveBlogCreated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBlogCreatedEventNextCursor() {
        AbstractBlogEvent lastEvent = blogEventRepository.findFirstBlogCreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBlogCreated(SuiMoveEventEnvelope<BlogCreated> eventEnvelope) {
        AbstractBlogEvent.BlogCreated blogCreated = DomainBeanUtils.toBlogCreated(eventEnvelope);
        if (blogEventRepository.findById(blogCreated.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(blogCreated);
    }

    @Transactional
    public void pullBlogUpdatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getBlogUpdatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<BlogUpdated> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.BLOG_MODULE_BLOG_UPDATED,
                    cursor, limit, false, BlogUpdated.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<BlogUpdated> eventEnvelope : eventPage.getData()) {
                    saveBlogUpdated(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getBlogUpdatedEventNextCursor() {
        AbstractBlogEvent lastEvent = blogEventRepository.findFirstBlogUpdatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveBlogUpdated(SuiMoveEventEnvelope<BlogUpdated> eventEnvelope) {
        AbstractBlogEvent.BlogUpdated blogUpdated = DomainBeanUtils.toBlogUpdated(eventEnvelope);
        if (blogEventRepository.findById(blogUpdated.getBlogEventId()).isPresent()) {
            return;
        }
        blogEventRepository.save(blogUpdated);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
