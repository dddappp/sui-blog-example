// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiblogexample.sui.contract;

import java.math.*;
import java.util.*;

import com.github.wubuku.sui.bean.AbstractSuiEventEnvelope;
import com.github.wubuku.sui.bean.MoveEvent;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.bean.Table;
import com.github.wubuku.sui.bean.ObjectTable;
import org.test.suiblogexample.domain.article.AbstractArticleEvent;
import org.test.suiblogexample.sui.contract.article.ArticleCreated;
import org.test.suiblogexample.sui.contract.article.ArticleUpdated;
import org.test.suiblogexample.sui.contract.article.ArticleDeleted;
import org.test.suiblogexample.sui.contract.article.CommentUpdated;
import org.test.suiblogexample.sui.contract.article.CommentRemoved;
import org.test.suiblogexample.sui.contract.article.CommentAdded;
import org.test.suiblogexample.sui.contract.article.ArticleTagsUpdated;
import org.test.suiblogexample.sui.contract.article.ArticleTagsV2Updated;
import org.test.suiblogexample.domain.tag.AbstractTagEvent;
import org.test.suiblogexample.sui.contract.tag.TagCreated;
import org.test.suiblogexample.domain.tagv2.AbstractTagV2Event;
import org.test.suiblogexample.sui.contract.tagv2.TagV2Created;
import org.test.suiblogexample.domain.blog.AbstractBlogEvent;
import org.test.suiblogexample.sui.contract.blog.InitBlogEvent;
import org.test.suiblogexample.sui.contract.blog.DonationReceived;
import org.test.suiblogexample.sui.contract.blog.VaultWithdrawn;
import org.test.suiblogexample.sui.contract.blog.ArticleAddedToBlog;
import org.test.suiblogexample.sui.contract.blog.ArticleRemovedFromBlog;
import org.test.suiblogexample.sui.contract.blog.BlogCreated;
import org.test.suiblogexample.sui.contract.blog.BlogUpdated;

/**
 * Utils that convert beans in the contract package to domain beans.
 */
public class DomainBeanUtils {
    private DomainBeanUtils() {
    }

    public static org.test.suiblogexample.domain.ObjectTable toObjectTable(ObjectTable contractObjectTable) {
        if (contractObjectTable == null) {
            return null;
        }
        org.test.suiblogexample.domain.ObjectTable objectTable = new org.test.suiblogexample.domain.ObjectTable();
        objectTable.setId(contractObjectTable.getFields().getId().getId());
        objectTable.setSize(contractObjectTable.getFields().getSize());
        return objectTable;
    }

    public static org.test.suiblogexample.domain.Table toTable(Table contractTable) {
        if (contractTable == null) {
            return null;
        }
        org.test.suiblogexample.domain.Table table = new org.test.suiblogexample.domain.Table();
        table.setId(contractTable.getFields().getId().getId());
        table.setSize(contractTable.getFields().getSize());
        return table;
    }


    public static AbstractArticleEvent.ArticleCreated toArticleCreated(SuiMoveEventEnvelope<ArticleCreated> eventEnvelope) {
        ArticleCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.ArticleCreated articleCreated = toArticleCreated(contractEvent);
        setArticleEventEnvelopeProperties(articleCreated, eventEnvelope);
        return articleCreated;
    }

    public static AbstractArticleEvent.ArticleCreated toArticleCreated(ArticleCreated contractEvent) {
        AbstractArticleEvent.ArticleCreated articleCreated = new AbstractArticleEvent.ArticleCreated();
        articleCreated.setId(contractEvent.getId());
        articleCreated.setBlogId(contractEvent.getBlogId());
        articleCreated.setTitle(contractEvent.getTitle());
        articleCreated.setBody(contractEvent.getBody());
        articleCreated.setOwner(contractEvent.getOwner());
        articleCreated.setVersion(BigInteger.valueOf(-1));
        return articleCreated;
    }

    public static AbstractArticleEvent.ArticleUpdated toArticleUpdated(SuiMoveEventEnvelope<ArticleUpdated> eventEnvelope) {
        ArticleUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.ArticleUpdated articleUpdated = toArticleUpdated(contractEvent);
        setArticleEventEnvelopeProperties(articleUpdated, eventEnvelope);
        return articleUpdated;
    }

    public static AbstractArticleEvent.ArticleUpdated toArticleUpdated(ArticleUpdated contractEvent) {
        AbstractArticleEvent.ArticleUpdated articleUpdated = new AbstractArticleEvent.ArticleUpdated();
        articleUpdated.setId(contractEvent.getId());
        articleUpdated.setTitle(contractEvent.getTitle());
        articleUpdated.setBody(contractEvent.getBody());
        articleUpdated.setOwner(contractEvent.getOwner());
        articleUpdated.setTags(contractEvent.getTags());
        articleUpdated.setTagsV2(contractEvent.getTagsV2());
        articleUpdated.setVersion(contractEvent.getVersion());
        return articleUpdated;
    }

    public static AbstractArticleEvent.ArticleDeleted toArticleDeleted(SuiMoveEventEnvelope<ArticleDeleted> eventEnvelope) {
        ArticleDeleted contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.ArticleDeleted articleDeleted = toArticleDeleted(contractEvent);
        setArticleEventEnvelopeProperties(articleDeleted, eventEnvelope);
        return articleDeleted;
    }

    public static AbstractArticleEvent.ArticleDeleted toArticleDeleted(ArticleDeleted contractEvent) {
        AbstractArticleEvent.ArticleDeleted articleDeleted = new AbstractArticleEvent.ArticleDeleted();
        articleDeleted.setId(contractEvent.getId());
        articleDeleted.setBlogId(contractEvent.getBlogId());
        articleDeleted.setVersion(contractEvent.getVersion());
        return articleDeleted;
    }

    public static AbstractArticleEvent.CommentUpdated toCommentUpdated(SuiMoveEventEnvelope<CommentUpdated> eventEnvelope) {
        CommentUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.CommentUpdated commentUpdated = toCommentUpdated(contractEvent);
        setArticleEventEnvelopeProperties(commentUpdated, eventEnvelope);
        return commentUpdated;
    }

    public static AbstractArticleEvent.CommentUpdated toCommentUpdated(CommentUpdated contractEvent) {
        AbstractArticleEvent.CommentUpdated commentUpdated = new AbstractArticleEvent.CommentUpdated();
        commentUpdated.setId(contractEvent.getId());
        commentUpdated.setCommentSeqId(contractEvent.getCommentSeqId());
        commentUpdated.setCommenter(contractEvent.getCommenter());
        commentUpdated.setBody(contractEvent.getBody());
        commentUpdated.setOwner(contractEvent.getOwner());
        commentUpdated.setVersion(contractEvent.getVersion());
        return commentUpdated;
    }

    public static AbstractArticleEvent.CommentRemoved toCommentRemoved(SuiMoveEventEnvelope<CommentRemoved> eventEnvelope) {
        CommentRemoved contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.CommentRemoved commentRemoved = toCommentRemoved(contractEvent);
        setArticleEventEnvelopeProperties(commentRemoved, eventEnvelope);
        return commentRemoved;
    }

    public static AbstractArticleEvent.CommentRemoved toCommentRemoved(CommentRemoved contractEvent) {
        AbstractArticleEvent.CommentRemoved commentRemoved = new AbstractArticleEvent.CommentRemoved();
        commentRemoved.setId(contractEvent.getId());
        commentRemoved.setCommentSeqId(contractEvent.getCommentSeqId());
        commentRemoved.setVersion(contractEvent.getVersion());
        return commentRemoved;
    }

    public static AbstractArticleEvent.CommentAdded toCommentAdded(SuiMoveEventEnvelope<CommentAdded> eventEnvelope) {
        CommentAdded contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.CommentAdded commentAdded = toCommentAdded(contractEvent);
        setArticleEventEnvelopeProperties(commentAdded, eventEnvelope);
        return commentAdded;
    }

    public static AbstractArticleEvent.CommentAdded toCommentAdded(CommentAdded contractEvent) {
        AbstractArticleEvent.CommentAdded commentAdded = new AbstractArticleEvent.CommentAdded();
        commentAdded.setId(contractEvent.getId());
        commentAdded.setCommentSeqId(contractEvent.getCommentSeqId());
        commentAdded.setCommenter(contractEvent.getCommenter());
        commentAdded.setBody(contractEvent.getBody());
        commentAdded.setOwner(contractEvent.getOwner());
        commentAdded.setVersion(contractEvent.getVersion());
        return commentAdded;
    }

    public static AbstractArticleEvent.ArticleTagsUpdated toArticleTagsUpdated(SuiMoveEventEnvelope<ArticleTagsUpdated> eventEnvelope) {
        ArticleTagsUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.ArticleTagsUpdated articleTagsUpdated = toArticleTagsUpdated(contractEvent);
        setArticleEventEnvelopeProperties(articleTagsUpdated, eventEnvelope);
        return articleTagsUpdated;
    }

    public static AbstractArticleEvent.ArticleTagsUpdated toArticleTagsUpdated(ArticleTagsUpdated contractEvent) {
        AbstractArticleEvent.ArticleTagsUpdated articleTagsUpdated = new AbstractArticleEvent.ArticleTagsUpdated();
        articleTagsUpdated.setId(contractEvent.getId());
        articleTagsUpdated.setTags(contractEvent.getTags());
        articleTagsUpdated.setVersion(contractEvent.getVersion());
        return articleTagsUpdated;
    }

    public static AbstractArticleEvent.ArticleTagsV2Updated toArticleTagsV2Updated(SuiMoveEventEnvelope<ArticleTagsV2Updated> eventEnvelope) {
        ArticleTagsV2Updated contractEvent = eventEnvelope.getParsedJson();
        AbstractArticleEvent.ArticleTagsV2Updated articleTagsV2Updated = toArticleTagsV2Updated(contractEvent);
        setArticleEventEnvelopeProperties(articleTagsV2Updated, eventEnvelope);
        return articleTagsV2Updated;
    }

    public static AbstractArticleEvent.ArticleTagsV2Updated toArticleTagsV2Updated(ArticleTagsV2Updated contractEvent) {
        AbstractArticleEvent.ArticleTagsV2Updated articleTagsV2Updated = new AbstractArticleEvent.ArticleTagsV2Updated();
        articleTagsV2Updated.setId(contractEvent.getId());
        articleTagsV2Updated.setTags(contractEvent.getTags());
        articleTagsV2Updated.setVersion(contractEvent.getVersion());
        return articleTagsV2Updated;
    }

    public static AbstractTagEvent.TagCreated toTagCreated(SuiMoveEventEnvelope<TagCreated> eventEnvelope) {
        TagCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractTagEvent.TagCreated tagCreated = toTagCreated(contractEvent);
        setTagEventEnvelopeProperties(tagCreated, eventEnvelope);
        return tagCreated;
    }

    public static AbstractTagEvent.TagCreated toTagCreated(TagCreated contractEvent) {
        AbstractTagEvent.TagCreated tagCreated = new AbstractTagEvent.TagCreated();
        tagCreated.setId_(contractEvent.getId());
        tagCreated.setName(contractEvent.getName());
        tagCreated.setVersion(BigInteger.valueOf(-1));
        return tagCreated;
    }

    public static AbstractTagV2Event.TagV2Created toTagV2Created(SuiMoveEventEnvelope<TagV2Created> eventEnvelope) {
        TagV2Created contractEvent = eventEnvelope.getParsedJson();
        AbstractTagV2Event.TagV2Created tagV2Created = toTagV2Created(contractEvent);
        setTagV2EventEnvelopeProperties(tagV2Created, eventEnvelope);
        return tagV2Created;
    }

    public static AbstractTagV2Event.TagV2Created toTagV2Created(TagV2Created contractEvent) {
        AbstractTagV2Event.TagV2Created tagV2Created = new AbstractTagV2Event.TagV2Created();
        tagV2Created.setId(contractEvent.getId());
        tagV2Created.setName(contractEvent.getName());
        tagV2Created.setVersion(BigInteger.valueOf(-1));
        return tagV2Created;
    }

    public static AbstractBlogEvent.InitBlogEvent toInitBlogEvent(SuiMoveEventEnvelope<InitBlogEvent> eventEnvelope) {
        InitBlogEvent contractEvent = eventEnvelope.getParsedJson();
        AbstractBlogEvent.InitBlogEvent initBlogEvent = toInitBlogEvent(contractEvent);
        setBlogEventEnvelopeProperties(initBlogEvent, eventEnvelope);
        return initBlogEvent;
    }

    public static AbstractBlogEvent.InitBlogEvent toInitBlogEvent(InitBlogEvent contractEvent) {
        AbstractBlogEvent.InitBlogEvent initBlogEvent = new AbstractBlogEvent.InitBlogEvent();
        initBlogEvent.setId(contractEvent.getId());
        initBlogEvent.setVersion(BigInteger.valueOf(-1));
        return initBlogEvent;
    }

    public static AbstractBlogEvent.DonationReceived toDonationReceived(SuiMoveEventEnvelope<DonationReceived> eventEnvelope) {
        DonationReceived contractEvent = eventEnvelope.getParsedJson();
        AbstractBlogEvent.DonationReceived donationReceived = toDonationReceived(contractEvent);
        setBlogEventEnvelopeProperties(donationReceived, eventEnvelope);
        return donationReceived;
    }

    public static AbstractBlogEvent.DonationReceived toDonationReceived(DonationReceived contractEvent) {
        AbstractBlogEvent.DonationReceived donationReceived = new AbstractBlogEvent.DonationReceived();
        donationReceived.setId(contractEvent.getId());
        donationReceived.setAmount(contractEvent.getAmount());
        donationReceived.setVersion(contractEvent.getVersion());
        return donationReceived;
    }

    public static AbstractBlogEvent.VaultWithdrawn toVaultWithdrawn(SuiMoveEventEnvelope<VaultWithdrawn> eventEnvelope) {
        VaultWithdrawn contractEvent = eventEnvelope.getParsedJson();
        AbstractBlogEvent.VaultWithdrawn vaultWithdrawn = toVaultWithdrawn(contractEvent);
        setBlogEventEnvelopeProperties(vaultWithdrawn, eventEnvelope);
        return vaultWithdrawn;
    }

    public static AbstractBlogEvent.VaultWithdrawn toVaultWithdrawn(VaultWithdrawn contractEvent) {
        AbstractBlogEvent.VaultWithdrawn vaultWithdrawn = new AbstractBlogEvent.VaultWithdrawn();
        vaultWithdrawn.setId(contractEvent.getId());
        vaultWithdrawn.setAmount(contractEvent.getAmount());
        vaultWithdrawn.setVersion(contractEvent.getVersion());
        return vaultWithdrawn;
    }

    public static AbstractBlogEvent.ArticleAddedToBlog toArticleAddedToBlog(SuiMoveEventEnvelope<ArticleAddedToBlog> eventEnvelope) {
        ArticleAddedToBlog contractEvent = eventEnvelope.getParsedJson();
        AbstractBlogEvent.ArticleAddedToBlog articleAddedToBlog = toArticleAddedToBlog(contractEvent);
        setBlogEventEnvelopeProperties(articleAddedToBlog, eventEnvelope);
        return articleAddedToBlog;
    }

    public static AbstractBlogEvent.ArticleAddedToBlog toArticleAddedToBlog(ArticleAddedToBlog contractEvent) {
        AbstractBlogEvent.ArticleAddedToBlog articleAddedToBlog = new AbstractBlogEvent.ArticleAddedToBlog();
        articleAddedToBlog.setId(contractEvent.getId());
        articleAddedToBlog.setArticleId(contractEvent.getArticleId());
        articleAddedToBlog.setVersion(contractEvent.getVersion());
        return articleAddedToBlog;
    }

    public static AbstractBlogEvent.ArticleRemovedFromBlog toArticleRemovedFromBlog(SuiMoveEventEnvelope<ArticleRemovedFromBlog> eventEnvelope) {
        ArticleRemovedFromBlog contractEvent = eventEnvelope.getParsedJson();
        AbstractBlogEvent.ArticleRemovedFromBlog articleRemovedFromBlog = toArticleRemovedFromBlog(contractEvent);
        setBlogEventEnvelopeProperties(articleRemovedFromBlog, eventEnvelope);
        return articleRemovedFromBlog;
    }

    public static AbstractBlogEvent.ArticleRemovedFromBlog toArticleRemovedFromBlog(ArticleRemovedFromBlog contractEvent) {
        AbstractBlogEvent.ArticleRemovedFromBlog articleRemovedFromBlog = new AbstractBlogEvent.ArticleRemovedFromBlog();
        articleRemovedFromBlog.setId(contractEvent.getId());
        articleRemovedFromBlog.setArticleId(contractEvent.getArticleId());
        articleRemovedFromBlog.setVersion(contractEvent.getVersion());
        return articleRemovedFromBlog;
    }

    public static AbstractBlogEvent.BlogCreated toBlogCreated(SuiMoveEventEnvelope<BlogCreated> eventEnvelope) {
        BlogCreated contractEvent = eventEnvelope.getParsedJson();
        AbstractBlogEvent.BlogCreated blogCreated = toBlogCreated(contractEvent);
        setBlogEventEnvelopeProperties(blogCreated, eventEnvelope);
        return blogCreated;
    }

    public static AbstractBlogEvent.BlogCreated toBlogCreated(BlogCreated contractEvent) {
        AbstractBlogEvent.BlogCreated blogCreated = new AbstractBlogEvent.BlogCreated();
        blogCreated.setId(contractEvent.getId());
        blogCreated.setArticles(contractEvent.getArticles());
        blogCreated.setVersion(BigInteger.valueOf(-1));
        return blogCreated;
    }

    public static AbstractBlogEvent.BlogUpdated toBlogUpdated(SuiMoveEventEnvelope<BlogUpdated> eventEnvelope) {
        BlogUpdated contractEvent = eventEnvelope.getParsedJson();
        AbstractBlogEvent.BlogUpdated blogUpdated = toBlogUpdated(contractEvent);
        setBlogEventEnvelopeProperties(blogUpdated, eventEnvelope);
        return blogUpdated;
    }

    public static AbstractBlogEvent.BlogUpdated toBlogUpdated(BlogUpdated contractEvent) {
        AbstractBlogEvent.BlogUpdated blogUpdated = new AbstractBlogEvent.BlogUpdated();
        blogUpdated.setId(contractEvent.getId());
        blogUpdated.setName(contractEvent.getName());
        blogUpdated.setArticles(contractEvent.getArticles());
        blogUpdated.setVersion(contractEvent.getVersion());
        return blogUpdated;
    }

    public static void setArticleEventEnvelopeProperties(AbstractArticleEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setTagEventEnvelopeProperties(AbstractTagEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setTagV2EventEnvelopeProperties(AbstractTagV2Event event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    public static void setBlogEventEnvelopeProperties(AbstractBlogEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiEventEnvelope.MutableSuiEventEnvelope) event, eventEnvelope);
        setEventEnvelopeProperties((org.test.suiblogexample.domain.SuiMoveEvent.MutableSuiMoveEvent) event, eventEnvelope);
    }

    private static void setEventEnvelopeProperties(org.test.suiblogexample.domain.SuiEventEnvelope.MutableSuiEventEnvelope event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        event.setSuiTimestamp(eventEnvelope.getTimestampMs());
        event.setSuiTxDigest(eventEnvelope.getId().getTxDigest());
        event.setSuiEventSeq(new BigInteger(eventEnvelope.getId().getEventSeq()));
    }

    private static void setEventEnvelopeProperties(org.test.suiblogexample.domain.SuiMoveEvent.MutableSuiMoveEvent event, AbstractSuiEventEnvelope<?> eventEnvelope) {
        event.setSuiPackageId(eventEnvelope.getPackageId());
        event.setSuiTransactionModule(eventEnvelope.getTransactionModule());
        event.setSuiSender(eventEnvelope.getSender());
    }

    public static List<String> extractTypeArguments(String type) {
        int i = type.indexOf("<");
        int j = type.lastIndexOf(">");
        if (i > 0 && j > i && j == type.length() - 1) {
            String typeArguments = type.substring(i + 1, j);
            String[] typeArgumentArray = typeArguments.split(",");
            return Arrays.stream(typeArgumentArray).map(String::trim).collect(java.util.stream.Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }
}
