// <autogenerated>
//   This file was generated by dddappp code generator.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

package org.test.suiblogexample.sui.contract.service;

import com.github.wubuku.sui.bean.EventId;
import com.github.wubuku.sui.bean.Page;
import com.github.wubuku.sui.bean.PaginatedMoveEvents;
import com.github.wubuku.sui.bean.SuiMoveEventEnvelope;
import com.github.wubuku.sui.utils.SuiJsonRpcClient;
import org.test.suiblogexample.domain.tagv2.AbstractTagV2Event;
import org.test.suiblogexample.sui.contract.ContractConstants;
import org.test.suiblogexample.sui.contract.DomainBeanUtils;
import org.test.suiblogexample.sui.contract.SuiPackage;
import org.test.suiblogexample.sui.contract.tagv2.TagV2Created;
import org.test.suiblogexample.sui.contract.repository.TagV2EventRepository;
import org.test.suiblogexample.sui.contract.repository.SuiPackageRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class TagV2EventService {

    @Autowired
    private SuiPackageRepository suiPackageRepository;

    @Autowired
    private SuiJsonRpcClient suiJsonRpcClient;

    @Autowired
    private TagV2EventRepository tagV2EventRepository;

    @Transactional
    public void updateStatusToProcessed(AbstractTagV2Event event) {
        event.setStatus("D");
        tagV2EventRepository.save(event);
    }

    @Transactional
    public void pullTagV2CreatedEvents() {
        String packageId = getDefaultSuiPackageId();
        if (packageId == null) {
            return;
        }
        int limit = 1;
        EventId cursor = getTagV2CreatedEventNextCursor();
        while (true) {
            PaginatedMoveEvents<TagV2Created> eventPage = suiJsonRpcClient.queryMoveEvents(
                    packageId + "::" + ContractConstants.TAG_V2_MODULE_TAG_V2_CREATED,
                    cursor, limit, false, TagV2Created.class);

            if (eventPage.getData() != null && !eventPage.getData().isEmpty()) {
                cursor = eventPage.getNextCursor();
                for (SuiMoveEventEnvelope<TagV2Created> eventEnvelope : eventPage.getData()) {
                    saveTagV2Created(eventEnvelope);
                }
            } else {
                break;
            }
            if (!Page.hasNextPage(eventPage)) {
                break;
            }
        }
    }

    private EventId getTagV2CreatedEventNextCursor() {
        AbstractTagV2Event lastEvent = tagV2EventRepository.findFirstTagV2CreatedByOrderBySuiTimestampDesc();
        return lastEvent != null ? new EventId(lastEvent.getSuiTxDigest(), lastEvent.getSuiEventSeq() + "") : null;
    }

    private void saveTagV2Created(SuiMoveEventEnvelope<TagV2Created> eventEnvelope) {
        AbstractTagV2Event.TagV2Created tagV2Created = DomainBeanUtils.toTagV2Created(eventEnvelope);
        if (tagV2EventRepository.findById(tagV2Created.getTagV2EventId()).isPresent()) {
            return;
        }
        tagV2EventRepository.save(tagV2Created);
    }


    private String getDefaultSuiPackageId() {
        return suiPackageRepository.findById(ContractConstants.DEFAULT_SUI_PACKAGE_NAME)
                .map(SuiPackage::getObjectId).orElse(null);
    }
}
